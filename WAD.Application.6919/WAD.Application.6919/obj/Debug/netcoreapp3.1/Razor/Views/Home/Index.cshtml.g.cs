#pragma checksum "D:\wiutpg\WAD-2020-2021\WAD.6919\WAD.Application.6919\00006919\WAD.Application.6919\WAD.Application.6919\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1dc95d48b2433e80e99d6d5300b64f90da2535bd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\wiutpg\WAD-2020-2021\WAD.6919\WAD.Application.6919\00006919\WAD.Application.6919\WAD.Application.6919\Views\_ViewImports.cshtml"
using WAD.Application._6919;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\wiutpg\WAD-2020-2021\WAD.6919\WAD.Application.6919\00006919\WAD.Application.6919\WAD.Application.6919\Views\_ViewImports.cshtml"
using WAD.Application._6919.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1dc95d48b2433e80e99d6d5300b64f90da2535bd", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5c23f69cf53d71f70c29e025c15ed21f71902479", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\wiutpg\WAD-2020-2021\WAD.6919\WAD.Application.6919\00006919\WAD.Application.6919\WAD.Application.6919\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div ng-app=""Sales"">
    <div ng-view></div>
</div>






<script type=""text/javascript"" src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js""></script>
<script type=""text/javascript"" src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-route.min.js""></script>

<script type=""text/javascript"">
    angular
        .module('Sales', ['ngRoute'])
        .config(function ($routeProvider) {
            $routeProvider
                .when('/categories', {
                    templateUrl: 'views/categories/list.html',
                    controller: 'CategoriesController'
                })
                .when('/categories/form', {
                    templateUrl: 'views/categories/form.html',
                    controller: 'CategoriesFormController'
                })
                .when('/products', {
                    templateUrl: 'views/products/list.html',
                    controller: 'ProductsController'
                })
            ");
            WriteLiteral(@"    .when('/product/form', {
                    templateUrl: 'views/products/form.html',
                    controller: 'ProductFormController'
                })
                .otherwise({
                    redirectTo: '/categories'
                })
        })
        .controller('ProductsController', ['$scope', '$http', function ($scope, $http) {
            $scope.products = [];
            $http.get('/api/product/GetAll')
                .then(function (response) {
                    $scope.products = response.data;
                    console.log(response.data)
                })

            $scope.create = function () {
                window.location = ""#!/product/form?action=create"";
            }

            $scope.update = function ($event) {
                let pass_id = $($event.target).data('id');
                window.location = ""#!/product/form/?action=update&pass_id="" + pass_id;

            }

            $scope.delete = function ($event) {
             ");
            WriteLiteral(@"   let pass_id = $($event.target).data('id');
                let url = '/api/product/delete/' + pass_id;

                $http({
                    method: 'GET',
                    url: url,
                })
                    .then(function (success) {
                        if (success.data) {
                            alert(""Successfully deleted"");
                            window.location = ""#!/products"";
                        } else {
                            alert(""Something happened"")
                        }
                    }, function (error) {
                        alert(error.status);
                    });
            }

        }])
        .controller('CategoriesController', ['$scope', '$http', function ($scope, $http) {
            $scope.categories = [];
            $http.get('/api/Category/GetAll')
                .then(function (response) {
                    $scope.categories = response.data;
                })

            $scope.redirec");
            WriteLiteral(@"t_to_form = function () {
                window.location = ""#!/categories/form?action=create"";
            }

            $scope.update = function ($event) {
                let pass_id = $($event.target).data('id');
                window.location = ""#!/categories/form/?action=update&pass_id="" + pass_id;

            }

            $scope.delete = function ($event) {
                let pass_id = $($event.target).data('id');
                let url = '/api/category/delete/' + pass_id;

                $http({
                    method: 'GET',
                    url: url,
                })
                    .then(function (success) {
                        if (success.data) {
                            alert(""Successfully deleted"");
                            window.location = ""#!/categories"";
                        } else {
                            alert(""Something happened"")
                        }
                    }, function (error) {
                        ale");
            WriteLiteral(@"rt(error.status);
                    });
            }

        }])
        .controller('CategoriesFormController', ['$scope', '$http', '$location', function ($scope, $http, $location) {

            $scope.send_form = function (actionId, category) {

                if (actionId == 'create') {

                    let url = '/api/category/create';

                    if (category && category.Name) {
                        $http({
                            method: 'POST',
                            url: url,
                            data: JSON.stringify(category)
                        })
                            .then(function (success) {
                                if (success.data) {
                                    alert(""Successfully added"");
                                    window.location = ""#!/categories"";
                                } else {
                                    alert(""Something happened"")
                                }
          ");
            WriteLiteral(@"                  }, function (error) {
                                alert(error.status);
                            });
                    } else {
                        alert(""Empty Name field"");
                    }
                }

                if (actionId == 'update') {

                    let url = '/api/category/update';

                    if (category && category.Name) {

                        category.Id = Number($location.search().pass_id);

                        $http({
                            method: 'POST',
                            url: url,
                            data: JSON.stringify(category)
                        })
                            .then(function (success) {
                                if (success.data) {
                                    alert(""Successfully update"");
                                    window.location = ""#!/categories"";
                                } else {
                                    al");
            WriteLiteral(@"ert(""Something happened"")
                                }
                            }, function (error) {
                                alert(error.status);
                            });
                    } else {
                        alert(""Empty Name field"");
                    }                    
                }



            }

            $scope.$on('$viewContentLoaded', function () {
                let action = $location.search().action;
                let pass_id = $location.search().pass_id;
                console.log(action)
                if (action == 'update') {
                    $scope.action = ""Update"";
                    $scope.actionId = ""update"";

                    $scope.categoryId = pass_id;

                    $scope.categoryName = '';
                    $http.get('/api/Category/Get/' + pass_id)
                        .then(function (response) {
                            $scope.categoryName = response.data.name;
                 ");
            WriteLiteral(@"       })

                }
                else {
                    $scope.action = ""Create"";
                    $scope.actionId = ""create"";
                }                    
            });

        }])
        .controller('ProductFormController', ['$scope', '$http', '$location', function ($scope, $http, $location) {

            $scope.categories = [];
            $http.get('/api/category/GetAll')
                .then(function (response) {
                    $scope.categories = response.data;
                    console.log($scope.categories)
                })

            $scope.send_form = function (actionId, product) {

                console.log(actionId, product);


                if (actionId == 'create') {

                    let url = '/api/product/create';

                    if (product) {

                        if (!product.Name) {
                            alert(""Empty Name Field"")
                            return;
                        }");
            WriteLiteral(@"
                        if (!product.Price) {
                            alert(""Empty Price Field"")
                            return;
                        }                            
                        if (!product.CategoryId) {
                            alert(""Empty Category Field"")
                            return;
                        }                            

                        product = {
                            Name: product.Name,
                            Price: product.Price,
                            Description: product.Description,
                            Category: {
                                Id: Number(product.CategoryId)
                            }
                        }

                        $http({
                            method: 'POST',
                            url: url,
                            data: JSON.stringify(product)
                        })
                            .then(function (success) {");
            WriteLiteral(@"
                                if (success.data) {
                                    alert(""Successfully added"");
                                    window.location = ""#!/products"";
                                } else {
                                    alert(""Something happened"")
                                }
                            }, function (error) {
                                alert(error.status);
                            });
                    } else {
                        alert(""Empty Product form"");
                    }
                }

                if (actionId == 'update') {

                    let url = '/api/product/update';

                    if (product) {

                        if (!product.Name) {
                            alert(""Empty Name Field"")
                            return;
                        }
                            
                        if (!product.Price) {
                            alert(""Empty P");
            WriteLiteral(@"rice Field"")
                            return;
                        }
                            
                        if (!product.CategoryId) {
                            alert(""Empty Category Field"")
                            return;
                        }
                            
                        product = {
                            Name: product.Name,
                            Price: product.Price,
                            Description: product.Description,
                            Category: {
                                Id: Number(product.CategoryId)
                            },
                            Id: Number($location.search().pass_id)
                        }

                        $http({
                            method: 'POST',
                            url: url,
                            data: JSON.stringify(product)
                        })
                            .then(function (success) {
                 ");
            WriteLiteral(@"               if (success.data) {
                                    alert(""Successfully updated"");
                                    window.location = ""#!/products"";
                                } else {
                                    alert(""Something happened"")
                                }
                            }, function (error) {
                                alert(error.status);
                            });
                    } else {
                        alert(""Empty Product form"");
                    }
                }



            }

            $scope.$on('$viewContentLoaded', function () {
                let action = $location.search().action;
                let pass_id = $location.search().pass_id;
                console.log(action)
                if (action == 'update') {
                    $scope.action = ""Update"";
                    $scope.actionId = ""update"";

                    $scope.productId = pass_id;
                  ");
            WriteLiteral(@"  $scope.productName = '';
                    $scope.productCategoryId = '';
                    $scope.productPrice = '';
                    $scope.productDescription = '';
                    
                    

                    $http.get('/api/product/Get/' + pass_id)
                        .then(function (response) {
                            let prod = response.data;

                            $scope.productName = prod.name;
                            $scope.productCategoryId = prod.category.id;
                            $scope.productPrice = prod.price;
                            $scope.productDescription = prod.description;

                        })

                }
                else {
                    $scope.action = ""Create"";
                    $scope.actionId = ""create"";
                }
            });

        }]);


</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
